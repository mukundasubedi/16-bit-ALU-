Code: 
`timescale 1ns / 1ps

module alu(
    output [15:0] LED,
    output reg[6:0] a_to_g,
    output reg [7:0] an,
    input [15:0] SW,
    input mclk);
  
    reg [15:0] A;
    reg [15:0] B;
    reg [2:0] num;
    reg [31:0] Y;
    reg [31:0] counter;
    wire SlowClk;

// Initialize ===========================================
    initial begin
        A = 16'b0000_0000_0000_0000;
        B = 16'b0000_0000_0000_0000;
        num = 3'b000;
        Y = 32'h0000_0000;
    end

// Reset ================================================
    always @ (posedge mclk or posedge SW[4]) begin
        if ( SW[4] == 1) begin
            A = 16'b0000_0000_0000_0000;
            B = 16'b0000_0000_0000_0000;
        end
        else begin
            A = 16'h5151;
            B = 16'hA2A2;
        end
    end
    
// ALU =================================================
    always @(posedge mclk) begin
        case (SW[1:0])
            2'b00:  Y= A+B;    //  0x011F; 287d
            2'b01:  Y= A-B;    // 0x0055; 85d
            2'b10:  Y= A*B;  // 0x4962; 0100_1001_0110_0010; 18,786d
            2'b11:  Y= A>>1;     // 0x005d; 93d
        endcase
    end

// Change placement of 7 segment display  =============
    always @(posedge sclk) begin
        case (num)
            3'b000: an = 8'b11111101;
            3'b001: an = 8'b11111011;
            3'b010: an = 8'b11110111;
            3'b011: an = 8'b11101111;
            3'b100: an = 8'b11011111;
            3'b101: an = 8'b10111111;
            3'b110: an = 8'b01111111;
            3'b111: an = 8'b11111110;
            default: an = 8'b11111111;
        endcase
        
        num <= num + 3'b001;
    end

// For each 7 segment display ===========================
    always @ (posedge mclk) begin       
        case(num)
            3'b000:
                case (Y[3:0])
                    4'b0000: a_to_g <= 7'b0000001; // 0
                    4'b0001: a_to_g <= 7'b1001111; // 1
                    4'b0010: a_to_g <= 7'b0010010; // 2
                    4'b0011: a_to_g <= 7'b0000110; // 3
                    4'b0100: a_to_g <= 7'b1001100; // 4
                    4'b0101: a_to_g <= 7'b0100100; // 5
                    4'b0110: a_to_g <= 7'b0100000; // 6
                    4'b0111: a_to_g <= 7'b0001111; // 7
                    4'b1000: a_to_g <= 7'b0000000; // 8
                    4'b1001: a_to_g <= 7'b0001100; // 9
                    4'b1010: a_to_g <= 7'b0001000; // A
                    4'b1011: a_to_g <= 7'b1100000; // B
                    4'b1100: a_to_g <= 7'b1110010; // C
                    4'b1101: a_to_g <= 7'b1000010; // D
                    4'b1110: a_to_g <= 7'b0110000; // E
                    4'b1111: a_to_g <= 7'b0111000; // F
                endcase
        
            3'b001:
                case (Y[7:4])
                    4'b0000: a_to_g <= 7'b0000001; // 0
                    4'b0001: a_to_g <= 7'b1001111; // 1
                    4'b0010: a_to_g <= 7'b0010010; // 2
                    4'b0011: a_to_g <= 7'b0000110; // 3
                    4'b0100: a_to_g <= 7'b1001100; // 4
                    4'b0101: a_to_g <= 7'b0100100; // 5
                    4'b0110: a_to_g <= 7'b0100000; // 6
                    4'b0111: a_to_g <= 7'b0001111; // 7
                    4'b1000: a_to_g <= 7'b0000000; // 8
                    4'b1001: a_to_g <= 7'b0001100; // 9
                    4'b1010: a_to_g <= 7'b0001000; // A
                    4'b1011: a_to_g <= 7'b1100000; // B
                    4'b1100: a_to_g <= 7'b1110010; // C
                    4'b1101: a_to_g <= 7'b1000010; // D
                    4'b1110: a_to_g <= 7'b0110000; // E
                    4'b1111: a_to_g <= 7'b0111000; // F
                endcase
       
           3'b010:
                case (Y[11:8])
                    4'b0000: a_to_g <= 7'b0000001; // 0
                    4'b0001: a_to_g <= 7'b1001111; // 1
                    4'b0010: a_to_g <= 7'b0010010; // 2
                    4'b0011: a_to_g <= 7'b0000110; // 3
                    4'b0100: a_to_g <= 7'b1001100; // 4
                    4'b0101: a_to_g <= 7'b0100100; // 5
                    4'b0110: a_to_g <= 7'b0100000; // 6
                    4'b0111: a_to_g <= 7'b0001111; // 7
                    4'b1000: a_to_g <= 7'b0000000; // 8
                    4'b1001: a_to_g <= 7'b0001100; // 9
                    4'b1010: a_to_g <= 7'b0001000; // A
                    4'b1011: a_to_g <= 7'b1100000; // B
                    4'b1100: a_to_g <= 7'b1110010; // C
                    4'b1101: a_to_g <= 7'b1000010; // D
                    4'b1110: a_to_g <= 7'b0110000; // E
                    4'b1111: a_to_g <= 7'b0111000; // F
                endcase

          3'b011:
                case (Y[15:12])
                    4'b0000: a_to_g <= 7'b0000001; // 0
                    4'b0001: a_to_g <= 7'b1001111; // 1
                    4'b0010: a_to_g <= 7'b0010010; // 2
                    4'b0011: a_to_g <= 7'b0000110; // 3
                    4'b0100: a_to_g <= 7'b1001100; // 4
                    4'b0101: a_to_g <= 7'b0100100; // 5
                    4'b0110: a_to_g <= 7'b0100000; // 6
                    4'b0111: a_to_g <= 7'b0001111; // 7
                    4'b1000: a_to_g <= 7'b0000000; // 8
                    4'b1001: a_to_g <= 7'b0001100; // 9
                    4'b1010: a_to_g <= 7'b0001000; // A
                    4'b1011: a_to_g <= 7'b1100000; // B
                    4'b1100: a_to_g <= 7'b1110010; // C
                    4'b1101: a_to_g <= 7'b1000010; // D
                    4'b1110: a_to_g <= 7'b0110000; // E
                    4'b1111: a_to_g <= 7'b0111000; // F
                endcase
              
          3'b100:
                case (Y[19:16])
                    4'b0000: a_to_g <= 7'b0000001; // 0
                    4'b0001: a_to_g <= 7'b1001111; // 1
                    4'b0010: a_to_g <= 7'b0010010; // 2
                    4'b0011: a_to_g <= 7'b0000110; // 3
                    4'b0100: a_to_g <= 7'b1001100; // 4
                    4'b0101: a_to_g <= 7'b0100100; // 5
                    4'b0110: a_to_g <= 7'b0100000; // 6
                    4'b0111: a_to_g <= 7'b0001111; // 7
                    4'b1000: a_to_g <= 7'b0000000; // 8
                    4'b1001: a_to_g <= 7'b0001100; // 9
                    4'b1010: a_to_g <= 7'b0001000; // A
                    4'b1011: a_to_g <= 7'b1100000; // B
                    4'b1100: a_to_g <= 7'b1110010; // C
                    4'b1101: a_to_g <= 7'b1000010; // D
                    4'b1110: a_to_g <= 7'b0110000; // E
                    4'b1111: a_to_g <= 7'b0111000; // F
                endcase
                      
           3'b101:
                case (Y[23:20])
                    4'b0000: a_to_g <= 7'b0000001; // 0
                    4'b0001: a_to_g <= 7'b1001111; // 1
                    4'b0010: a_to_g <= 7'b0010010; // 2
                    4'b0011: a_to_g <= 7'b0000110; // 3
                    4'b0100: a_to_g <= 7'b1001100; // 4
                    4'b0101: a_to_g <= 7'b0100100; // 5
                    4'b0110: a_to_g <= 7'b0100000; // 6
                    4'b0111: a_to_g <= 7'b0001111; // 7
                    4'b1000: a_to_g <= 7'b0000000; // 8
                    4'b1001: a_to_g <= 7'b0001100; // 9
                    4'b1010: a_to_g <= 7'b0001000; // A
                    4'b1011: a_to_g <= 7'b1100000; // B
                    4'b1100: a_to_g <= 7'b1110010; // C
                    4'b1101: a_to_g <= 7'b1000010; // D
                    4'b1110: a_to_g <= 7'b0110000; // E
                    4'b1111: a_to_g <= 7'b0111000; // F
                endcase
                
          3'b110:
                case (Y[27:24])
                    4'b0000: a_to_g <= 7'b0000001; // 0
                    4'b0001: a_to_g <= 7'b1001111; // 1
                    4'b0010: a_to_g <= 7'b0010010; // 2
                    4'b0011: a_to_g <= 7'b0000110; // 3
                    4'b0100: a_to_g <= 7'b1001100; // 4
                    4'b0101: a_to_g <= 7'b0100100; // 5
                    4'b0110: a_to_g <= 7'b0100000; // 6
                    4'b0111: a_to_g <= 7'b0001111; // 7
                    4'b1000: a_to_g <= 7'b0000000; // 8
                    4'b1001: a_to_g <= 7'b0001100; // 9
                    4'b1010: a_to_g <= 7'b0001000; // A
                    4'b1011: a_to_g <= 7'b1100000; // B
                    4'b1100: a_to_g <= 7'b1110010; // C
                    4'b1101: a_to_g <= 7'b1000010; // D
                    4'b1110: a_to_g <= 7'b0110000; // E
                    4'b1111: a_to_g <= 7'b0111000; // F
                endcase
        
          3'b111:
                case (Y[31:28])
                    4'b0000: a_to_g <= 7'b0000001; // 0
                    4'b0001: a_to_g <= 7'b1001111; // 1
                    4'b0010: a_to_g <= 7'b0010010; // 2
                    4'b0011: a_to_g <= 7'b0000110; // 3
                    4'b0100: a_to_g <= 7'b1001100; // 4
                    4'b0101: a_to_g <= 7'b0100100; // 5
                    4'b0110: a_to_g <= 7'b0100000; // 6
                    4'b0111: a_to_g <= 7'b0001111; // 7
                    4'b1000: a_to_g <= 7'b0000000; // 8
                    4'b1001: a_to_g <= 7'b0001100; // 9
                    4'b1010: a_to_g <= 7'b0001000; // A
                    4'b1011: a_to_g <= 7'b1100000; // B
                    4'b1100: a_to_g <= 7'b1110010; // C
                    4'b1101: a_to_g <= 7'b1000010; // D
                    4'b1110: a_to_g <= 7'b0110000; // E
                    4'b1111: a_to_g <= 7'b0111000; // F
                endcase
          endcase
    end // end always

// Assign statements & module instantiation 
    assign LED=SW;
    SlowClk clk(sclk, mclk);

endmodule

// Clock 
module SlowClk(
    output reg sclk,
    input mclk);
    
    reg [31:0] counter;
    
    initial begin
        counter <= 32'h00000000;
        sclk <= 0;
    end
    
    always@(posedge mclk) begin
        counter <= counter + 32'h0000ffff;
        
        if (counter > 32'h99999999) begin
            counter = 32'h00000000;
            sclk = !sclk;
        end
    end // end always
endmodule
